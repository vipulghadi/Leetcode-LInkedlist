 Node*merge(Node*head1,Node*head2){
        if(head1==NULL)return head2;
        if(head2==NULL)return head1;
        Node*dummy=new Node(-1);
        Node*temp=dummy;
        while(head1&&head2){
            int val1=head1->data,val2=head2->data;
            if(val1>val2){
                temp->next=head2;
                head2=head2->next;
                temp=temp->next;
            }
            else{
                temp->next=head1;
                head1=head1->next;
                temp=temp->next;
            }
        }
        if(head1)temp->next=head1;
        if(head2)temp->next=head2;
        return dummy->next;
    }
    Node*solve(int c,Node*arr[],int K)
    {
        if(c==K)return arr[c];
        c++;
        Node*next=solve(c,arr,K);
        c--;
        return merge(arr[c],next);
    }
    Node * mergeKLists(Node *arr[], int K)
    {     
          K--;
          int c=0;
          return solve(c,arr,K);
    }
