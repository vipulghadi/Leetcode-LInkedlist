---------------------------------------using 2 loops 0(2*n)-----------------------------------------------------------------------------
    Node*reverse(Node*head)
    {
      Node*cur=head,*pre=NULL;
        while(cur){
            Node*next_=cur->next;
            cur->next=pre;
            pre=cur;
            cur=next_;
        }
        return pre;
    }
    Node *compute(Node *head)
    {
        if(head==NULL ||head->next==NULL)return head;
        head=reverse(head);
        Node*temp=head;
        while(temp->next){
            if(temp->data>temp->next->data)temp->next=temp->next->next;
            else temp=temp->next;
        }
        return reverse(head);
    }
    --------------------------------------------very good 0(n) aproach-------------------------------------------------------------------------
        Node*cur=head;
      while(cur->next)
      {
          if(cur->data<cur->next->data)
          {
              Node*temp=cur->next;
              cur->data=temp->data;
              cur->next=temp->next;
              delete temp;
              cur=head;
              
          }
          else cur=cur->next;
      }
      return head;
    }
    ----------------------------------------------very tricky recursive solution (few lines of code)---------------------------------------------------------------------
      Node *compute(Node *head)
    {
      if(head==NULL || head->next==NULL)return head;
       Node*headNext=compute(head->next);
      (head->data>=headNext->data)?head->next=headNext:head=headNext;
      return head;
    } 
    ------------------------------------------------------------------------------------------------------------------------------
